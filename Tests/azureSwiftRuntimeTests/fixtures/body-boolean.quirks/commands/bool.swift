// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// Bool is the test Infrastructure for AutoRest
import Foundation
import azureSwiftRuntime
struct BoolNamespace {
    // GetFalse get false Boolean value
    public class GetFalseCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/bool/false"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Bool?.self, from: data) as Decodable
        }
        
        public func execute(client: RuntimeClient) throws -> Bool? {
            return try client.execute(command: self) as! Bool?
        }
    }

    // GetInvalid get invalid Boolean value
    public class GetInvalidCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/bool/invalid"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Bool?.self, from: data) as Decodable
        }
        
        public func execute(client: RuntimeClient) throws -> Bool? {
            return try client.execute(command: self) as! Bool?
        }
    }

    // GetNull get null Boolean value
    public class GetNullCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/bool/null"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Bool?.self, from: data) as Decodable
        }
        
        public func execute(client: RuntimeClient) throws -> Bool? {
            return try client.execute(command: self) as! Bool?
        }
    }

    // GetTrue get true Boolean value
    public class GetTrueCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/bool/true"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Bool?.self, from: data) as Decodable
        }
        
        public func execute(client: RuntimeClient) throws -> Bool? {
            return try client.execute(command: self) as! Bool?
        }
    }

    // PutFalse set Boolean value false
    public class PutFalseCommand : BaseCommand {
        public var boolBody :  Bool?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/bool/false"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = boolBody as Codable
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(boolBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutTrue set Boolean value true
    public class PutTrueCommand : BaseCommand {
        public var boolBody :  Bool?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/bool/true"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = boolBody as Codable
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(boolBody);
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

}
