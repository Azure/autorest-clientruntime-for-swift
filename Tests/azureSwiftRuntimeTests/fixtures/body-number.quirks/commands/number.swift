// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// Number is the test Infrastructure for AutoRest
import Foundation
import azureSwiftRuntime
struct NumberNamespace {
    // GetBigDecimal get big decimal value 2.5976931e+101
    public class GetBigDecimalCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/decimal/2.5976931e+101"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Decimal?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Decimal? {
            return try client.execute(command: self) as! Decimal?
        }
    }

    // GetBigDecimalNegativeDecimal get big decimal value -99999999.99
    public class GetBigDecimalNegativeDecimalCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/decimal/-99999999.99"
        }

        public override func preCall()  {
        }
        
        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Decimal?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Decimal? {
            return try client.execute(command: self) as! Decimal?
        }
    }

    // GetBigDecimalPositiveDecimal get big decimal value 99999999.99
    public class GetBigDecimalPositiveDecimalCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/decimal/99999999.99"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try JsonResponseDecoder.decode(Decimal?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Decimal? {
            return try client.execute(command: self) as! Decimal?
        }
    }

    // GetBigDouble get big double value 2.5976931e+101
    public class GetBigDoubleCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/double/2.5976931e+101"
        }

        public override func preCall()  {
        }


        override func returnFunc(data: Data) throws -> Decodable? {
            return try  CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetBigDoubleNegativeDecimal get big double value -99999999.99
    public class GetBigDoubleNegativeDecimalCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/double/-99999999.99"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try  CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetBigDoublePositiveDecimal get big double value 99999999.99
    public class GetBigDoublePositiveDecimalCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/double/99999999.99"
        }

        public override func preCall()  {
        }


        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetBigFloat get big float value 3.402823e+20
    public class GetBigFloatCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/big/float/3.402823e+20"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try  CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetInvalidDouble get invalid double Number value
    public class GetInvalidDoubleCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/invaliddouble"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try  CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetInvalidFloat get invalid float Number value
    public class GetInvalidFloatCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/invalidfloat"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetNull get null Number value
    public class GetNullCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/null"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetSmallDecimal get small decimal value 2.5976931e-101
    public class GetSmallDecimalCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/small/decimal/2.5976931e-101"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try CoderFactory.decoder(for: .json).decode(Decimal?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Decimal? {
            return try client.execute(command: self) as! Decimal?
        }
    }

    // GetSmallDouble get big double value 2.5976931e-101
    public class GetSmallDoubleCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/small/double/2.5976931e-101"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try  CoderFactory.decoder(for: .json).decode(Double?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Double? {
            return try client.execute(command: self) as! Double?
        }
    }

    // GetSmallFloat get big double value 3.402823e-20
    public class GetSmallFloatCommand : BaseCommand {

        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/number/small/float/3.402823e-20"
        }

        public override func preCall()  {
        }

        override func returnFunc(data: Data) throws -> Decodable? {
            return try  CoderFactory.decoder(for: .json).decode(Float?.self, from: data)
        }
        
        public func execute(client: RuntimeClient) throws -> Float? {
            return try client.execute(command: self) as! Float?
        }
    }

    // PutBigDecimal put big decimal value 2.5976931e+101
    public class PutBigDecimalCommand : BaseCommand {
        public var numberBody :  Decimal?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/decimal/2.5976931e+101"
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutBigDecimalNegativeDecimal put big decimal value -99999999.99
    public class PutBigDecimalNegativeDecimalCommand : BaseCommand {
        public var numberBody :  Decimal?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/decimal/-99999999.99"
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutBigDecimalPositiveDecimal put big decimal value 99999999.99
    public class PutBigDecimalPositiveDecimalCommand : BaseCommand {
        public var numberBody :  Decimal?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/decimal/99999999.99"
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutBigDouble put big double value 2.5976931e+101
    public class PutBigDoubleCommand : BaseCommand {
        public var numberBody :  Double?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/double/2.5976931e+101"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutBigDoubleNegativeDecimal put big double value -99999999.99
    public class PutBigDoubleNegativeDecimalCommand : BaseCommand {
        public var numberBody :  Double?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/double/-99999999.99"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutBigDoublePositiveDecimal put big double value 99999999.99
    public class PutBigDoublePositiveDecimalCommand : BaseCommand {
        public var numberBody :  Double?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/double/99999999.99"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutBigFloat put big float value 3.402823e+20
    public class PutBigFloatCommand : BaseCommand {
        public var numberBody :  Double?

         public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/big/float/3.402823e+20"
            self.headerParameters = ["Content-Type":"application/json"]
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutSmallDecimal put small decimal value 2.5976931e-101
    public class PutSmallDecimalCommand : BaseCommand {
        public var numberBody :  Decimal?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/small/decimal/2.5976931e-101"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutSmallDouble put small double value 2.5976931e-101
    public class PutSmallDoubleCommand : BaseCommand {
        public var numberBody :  Double?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/small/double/2.5976931e-101"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutSmallFloat put small float value 3.402823e-20
    public class PutSmallFloatCommand : BaseCommand {
        public var numberBody :  Double?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/number/small/float/3.402823e-20"
            self.headerParameters = ["Content-Type":"application/json"]
        }

        public override func preCall()  {
            self.body = numberBody
        }

        public override func encodeBody() throws -> Data? {
            return try CoderFactory.encoder(for: .json).encode(numberBody)
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }
}
