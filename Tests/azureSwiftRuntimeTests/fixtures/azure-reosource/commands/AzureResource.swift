// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ManagementClient is the resource Flattening for AutoRest
import Foundation
import azureSwiftRuntime
struct AzureResource {
    // GetArray get External Resource as an Array
    public class GetArrayCommand : BaseCommand {

        public init(test:String) {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/array"
        }
        
        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/array"
        }

        public override func preCall()  {
        }

        public override func returnFunc(decoder: ResponseDecoder, jsonString: String) throws -> Decodable? {
            return try decoder.decode([FlattenedProductData?]?.self, from: jsonString)
        }
        
        public func execute(client: RuntimeClient) throws -> [FlattenedProductProtocol?]? {
            return try client.execute(command: self) as! [FlattenedProductProtocol?]?
        }
    }

    // GetDictionary get External Resource as a Dictionary
    public class GetDictionaryCommand : BaseCommand {

        public init(test:String) {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/dictionary"
        }
        
        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/dictionary"
        }

        public override func preCall()  {
        }


        public override func returnFunc(decoder: ResponseDecoder, jsonString: String) throws -> Decodable? {
            return try decoder.decode([String:FlattenedProductData?]?.self, from: jsonString)
        }
        
        public func execute(client: RuntimeClient) throws -> [String:FlattenedProductProtocol?]? {
            return try client.execute(command: self) as! [String:FlattenedProductProtocol?]?
        }
    }

    // GetResourceCollection get External Resource as a ResourceCollection
    public class GetResourceCollectionCommand : BaseCommand {

        public init(test:String) {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/resourcecollection"
        }
        
        public override init() {
            super.init()
            self.method = "Get"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/resourcecollection"
        }

        public override func preCall()  {
        }


        public override func returnFunc(decoder: ResponseDecoder, jsonString: String) throws -> Decodable? {
            return try decoder.decode(ResourceCollectionData?.self, from: jsonString)
        }
        public func execute(client: RuntimeClient) throws -> ResourceCollectionProtocol? {
            return try client.execute(command: self) as! ResourceCollectionProtocol?
        }
    }

    // PutArray put External Resource as an Array
    public class PutArrayCommand : BaseCommand {
        public var resourceArray :  [ResourceProtocol?]?

        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/array"
        }

        public override func preCall()  {
            self.body = resourceArray
        }

        public override func encodeBody() throws -> Data? {
            let jsonEncoder = JSONEncoder()
            let jsonData = try jsonEncoder.encode(resourceArray as! [ResourceData?]?)
            return jsonData
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutDictionary put External Resource as a Dictionary
    public class PutDictionaryCommand : BaseCommand {
        public var resourceDictionary :  [String:FlattenedProductProtocol?]?

        public init(test:String) {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/dictionary"
        }
        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/dictionary"
        }

        public override func preCall()  {
            self.body = resourceDictionary
        }

        public override func encodeBody() throws -> Data? {
            let jsonEncoder = JSONEncoder()
            let jsonData = try jsonEncoder.encode(resourceDictionary as! [String:FlattenedProductData?]?)
            return jsonData
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

    // PutResourceCollection put External Resource as a ResourceCollection
    public class PutResourceCollectionCommand : BaseCommand {
        public var resourceComplexObject :  ResourceCollectionProtocol?

        public init(test:String) {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/resourcecollection"
        }
        public override init() {
            super.init()
            self.method = "Put"
            self.isLongRunningOperation = false
            self.path = "/azure/resource-flatten/resourcecollection"
        }

        public override func preCall()  {
            self.body = resourceComplexObject
        }

        public override func encodeBody() throws -> Data? {
            let jsonEncoder = JSONEncoder()
            let jsonData = try jsonEncoder.encode(resourceComplexObject as! ResourceCollectionData?)
            return jsonData
        }

        public func execute(client: RuntimeClient) throws -> Decodable? {
            return try client.execute(command: self)
        }
    }

}
